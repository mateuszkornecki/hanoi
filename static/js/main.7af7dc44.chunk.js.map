{"version":3,"sources":["serviceWorker.ts","Colors.ts","components/Segment.tsx","components/Stack.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Colors","Segment","index","colors","Red","Green","Blue","Yellow","Pink","Lime","Orange","Purple","segmentStyle","height","width","background","borderRadius","style","Stack","segments","stackIndex","className","id","map","segmentIndex","key","Board","initialStacksConfig","first","second","third","initialState","from","to","useState","stacks","setStacks","stacksToChange","setStacksToChange","targetStack","useEffect","moveSegments","length","prevState","start","end","newStart","splice","newEnd","newStacks","console","log","onClick","event","persist","target","hasOwnProperty","setStacksToEdit","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7af7dc44.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum Colors {\n  Red = \"tomato\",\n  Green = \"lightgreen\",\n  Blue = \"lightblue\",\n  Yellow = \"#ffef00\",\n  Pink = \"hotpink\",\n  Lime = \"lime\",\n  Orange = \"orange\",\n  Purple = \"purple\",\n}\n","import React from \"react\";\nimport { Colors } from \"../Colors\";\n\nexport interface SegmentProps {\n  index: number;\n}\n\nexport function Segment({ index }: SegmentProps) {\n  const colors = [\n    Colors.Red,\n    Colors.Green,\n    Colors.Blue,\n    Colors.Yellow,\n    Colors.Pink,\n    Colors.Lime,\n    Colors.Orange,\n    Colors.Purple,\n  ];\n\n  const segmentStyle = {\n    height: \"1rem\",\n    width: `${index + 1}rem`,\n    background: colors[index],\n    borderRadius: \"4px\",\n  };\n\n  return <div style={segmentStyle} />;\n}\n","import React from \"react\";\nimport \"./Board.scss\";\nimport { Segment } from \"./Segment\";\n\nexport interface StackProps {\n  stackIndex: string;\n  segments: Array<number>;\n}\n\nexport function Stack({ segments, stackIndex }: StackProps) {\n  const stackStyle = {\n    width: \"10rem\",\n    height: \"10rem\",\n    background: \"lightgray\",\n  };\n\n  return (\n    <div className=\"stack\" id={stackIndex} style={stackStyle}>\n      {segments.map((segmentIndex) => (\n        <Segment index={segmentIndex} key={segmentIndex + \"asd\"} />\n      ))}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Stack } from \"./Stack\";\n\ninterface Stacks {\n  first: Array<number>;\n  second: Array<number>;\n  third: Array<number>;\n}\n\ninterface StacksToChange {\n  from: keyof Stacks | null;\n  to: keyof Stacks | null;\n}\n\nfunction Board() {\n  const initialStacksConfig: Stacks = {\n    first: [],\n    second: [],\n    third: [0, 1, 2, 3, 5],\n  };\n  const initialState: StacksToChange = { from: null, to: null };\n  const [stacks, setStacks] = useState(initialStacksConfig);\n  const [stacksToChange, setStacksToChange] = useState(initialState);\n\n  const targetStack = stacks[stacksToChange.to as keyof Stacks];\n\n  useEffect(() => {\n    setStacksToChange(initialState);\n    moveSegments();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [targetStack]);\n\n  const setStacksToEdit = (id: string) => {\n    if (!stacksToChange.from && (stacks as any)[id].length) {\n      setStacksToChange((prevState) => ({ ...prevState, from: id } as any));\n    } else if (stacksToChange.from && stacksToChange.from !== id) {\n      setStacksToChange((prevState) => ({ ...prevState, to: id } as any));\n    } else {\n      setStacksToChange(initialState);\n    }\n  };\n\n  const moveSegments = (): void => {\n    const isLegalMove =\n      stacksToChange.from &&\n      stacksToChange.to &&\n      (!stacks[stacksToChange.to].length ||\n        stacks[stacksToChange.from][0] < stacks[stacksToChange.to][0]);\n\n    if (isLegalMove) {\n      setStacks((prevState) => {\n        const start = prevState[stacksToChange.from as keyof Stacks];\n        const end = prevState[stacksToChange.to as keyof Stacks];\n        const newStart = [...start];\n        newStart.splice(0, 1);\n        const newEnd = prevState.second ? [start[0], ...end] : [start[0]];\n\n        const newStacks = { ...prevState };\n        newStacks[stacksToChange.from as keyof Stacks] = newStart;\n        newStacks[stacksToChange.to as keyof Stacks] = newEnd;\n        return newStacks;\n      });\n    } else {\n      console.log(\"invalid move\");\n      setStacksToChange(initialState);\n    }\n  };\n\n  const handleClick = (event: React.MouseEvent) => {\n    event.persist();\n    const id = (event.target as HTMLDivElement).id;\n    if (initialStacksConfig.hasOwnProperty(id)) {\n      setStacksToEdit(id);\n    }\n  };\n\n  return (\n    <div className=\"Board\" onClick={handleClick}>\n      <Stack stackIndex={\"first\"} segments={stacks.first} />\n      <Stack stackIndex={\"second\"} segments={stacks.second} />\n      <Stack stackIndex={\"third\"} segments={stacks.third} />\n    </div>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./components/Board\";\n\nfunction App() {\n  return <Board />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}